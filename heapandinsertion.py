# -*- coding: utf-8 -*-
"""heapandinsertion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zs-P8P9ziD7rPPcTK7OYgoSYbcUPtMao
"""

import time
import matplotlib.pyplot as plt
import heapq

# Insertion Sort
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

# Heap Sort
def heapify(arr, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    if left < n and arr[left] > arr[largest]:
        largest = left

    if right < n and arr[right] > arr[largest]:
        largest = right

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)
    for i in range(n//2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)

# Function to measure time for sorting
def time_insertion_sort(n):
    arr = list(range(n, 0, -1))  # Reverse sorted list to worst case
    start_time = time.time()
    insertion_sort(arr)
    end_time = time.time()
    return end_time - start_time

def time_heap_sort(n):
    arr = list(range(n, 0, -1))  # Reverse sorted list to worst case
    start_time = time.time()
    heap_sort(arr)
    end_time = time.time()
    return end_time - start_time

# Values of n to test
n_values = [10, 50, 100, 500, 1000, 5000, 10000]

# Collect times for Insertion Sort and Heap Sort
insertion_sort_times = [time_insertion_sort(n) for n in n_values]
heap_sort_times = [time_heap_sort(n) for n in n_values]

# Plotting the graph
plt.plot(n_values, insertion_sort_times, marker='o', label='Insertion Sort')
plt.plot(n_values, heap_sort_times, marker='x', label='Heap Sort')
plt.xlabel('Number of Elements (n)')
plt.ylabel('Time Taken (seconds)')
plt.title('Time Taken for Sorting Algorithms vs Number of Elements')
plt.legend()
plt.grid(True)
plt.show()