# -*- coding: utf-8 -*-
"""binarysearch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zs-P8P9ziD7rPPcTK7OYgoSYbcUPtMao
"""

import time
import matplotlib.pyplot as plt

# Recursive Binary Search Function
def binary_search(arr, target, low, high):
    if low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] > target:
            return binary_search(arr, target, low, mid - 1)
        else:
            return binary_search(arr, target, mid + 1, high)
    return -1

# Function to perform the experiment and record time
def time_binary_search(n):
    arr = list(range(n))  # Create a sorted list with n elements
    target = n - 1  # Let's search for the last element
    start_time = time.time()
    binary_search(arr, target, 0, n - 1)
    end_time = time.time()
    return end_time - start_time

# Number of elements to test
n_values = [10, 50, 100, 500, 1000, 5000, 10000]
times = [time_binary_search(n) for n in n_values]

# Plotting the graph
plt.plot(n_values, times, marker='o')
plt.xlabel('Number of Elements (n)')
plt.ylabel('Time Taken (seconds)')
plt.title('Time Taken for Recursive Binary Search vs Number of Elements')
plt.grid(True)
plt.show()